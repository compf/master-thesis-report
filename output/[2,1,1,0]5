Data clumps
The term  Data Clump was coined by Martin Fowler in as one possible code smell that can occur in source code. He describes data clumps as follows:

Data items tend to be like children: They enjoy hanging around together.  around in groups. Often you will see
the same three or four data items together in lots of
places: fields in a couple of classes, parameters in many
method signatures. 

This definition is somewhat imprecise. It is not specified whether three or four data items are necessary. Also  a couple of classes and do not define concrete numbers.

A more precise and algorithmic  definition of  data clumps is provided by  According to them, a data clump  can be defined on the field or method-parameter levels.
To be a method parameter data clump, a group of at least three variables must appear in multiple methods. Those variables must be duplicated, meaning they share the same name and data type. However, the inner order of the group does not need to be the same.

These conditions often need to be more relaxed. For instance, methods can be inherited and overridden so that a group of parameters may appear in each derived class thereby fulfilling the definition of a method parameter data clump. Since (except for the identifiers of the parameters) an overriding method must be the same as the overridden method, they are not considered data clumps.

To be a field data clump, similar conditions apply. There must be at least three fields that appear in more than one class and the names and data types of the variables must the same while the inner order may be different. Since in most programming language, a field can have an additional access modifier (e.g.  private, etc. ), the access modifier should also be included to determine whether two groups of variables are identical and hence a data clump.

The definition might also need to be more relaxed for both method and field data clumps. Two variables, that have the same name but a compatible type in at least one direction  (e.g.  int and  , would be disregarded as a data clump according to the formalized definition, although some would regard them a data clump.

Also, modification of a variable's identifier might not change its meaning. For instance, typos can happen, or synonyms can be used so that an automatic algorithm might not discover the connection of two variables but requires  knowledge of the semantics of the source code. 


To conclude, the core definition of a data clump is clear. However, this definition still leaves out some edge cases that require a semantic understanding of the source code.

An example of a data clump is shown in listing 
undefinedSome operations on vectorsundefined,
label=lst:math_stuff_java,
captionpos=b,language=java, basicstyle=
figures/chapter3/MathStuff.java



Listing 


It can be seen that  the snippet contains a method parameter data clump since the variables  x,  and  occur thrice.  These variables might be called  {data clump items}
